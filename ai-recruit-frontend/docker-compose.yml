version: '3.8'

services:
  # Mock API Server
  mock-api:
    build:
      context: ./services/mock-api
      dockerfile: Dockerfile
    ports:
      - "4000:4000"  # REST API
      - "4001:4001"  # WebSocket
    environment:
      NODE_ENV: development
      PORT: 4000
      WS_PORT: 4001
    networks:
      - ai-recruit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Recruiter Dashboard
  recruiter-dashboard:
    build:
      context: .
      dockerfile: apps/recruiter-dashboard/Dockerfile
      args:
        APP_NAME: recruiter-dashboard
    ports:
      - "3000:3000"
    environment:
      NUXT_PUBLIC_API_BASE: http://mock-api:4000
      NUXT_PUBLIC_WS_URL: ws://mock-api:4001
      NUXT_PUBLIC_WEBRTC_URL: http://mock-api:4002
    depends_on:
      - mock-api
    networks:
      - ai-recruit-network
    volumes:
      - ./apps/recruiter-dashboard:/app/apps/recruiter-dashboard:ro
      - ./packages:/app/packages:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Candidate Portal
  candidate-portal:
    build:
      context: .
      dockerfile: apps/candidate-portal/Dockerfile
      args:
        APP_NAME: candidate-portal
    ports:
      - "3001:3000"
    environment:
      NUXT_PUBLIC_API_BASE: http://mock-api:4000
      NUXT_PUBLIC_WS_URL: ws://mock-api:4001
      NUXT_PUBLIC_WEBRTC_URL: http://mock-api:4002
      NUXT_PUBLIC_MAX_RECORDING_DURATION: 300
      NUXT_PUBLIC_IDLE_TIMEOUT: 300
      NUXT_PUBLIC_TAB_SWITCH_LIMIT: 3
    depends_on:
      - mock-api
    networks:
      - ai-recruit-network
    volumes:
      - ./apps/candidate-portal:/app/apps/candidate-portal:ro
      - ./packages:/app/packages:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - recruiter-dashboard
      - candidate-portal
      - mock-api
    networks:
      - ai-recruit-network
    profiles:
      - production

  # Redis for session management (Production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-recruit-network
    profiles:
      - production
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_recruit
      POSTGRES_USER: ai_recruit_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_here}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ai-recruit-network
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_recruit_user"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ai-recruit-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
